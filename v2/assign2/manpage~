================================================================================
Usage: make [option]
  clean,			clean all files apart from source file.
  man,				show the manual.
  all, 				compile the files
IMPORTANT: 
   The makefile do not run the program automatically. You should run the
program like this:
   ./sercli.out [--lambda[0.005]] [--mu [0.01]] [--servers[2]] --[clients[2
   ]]
For example:
   ./sercli.out --lambda 0.5 --mu 0.02 --servers 5 --clients 5
   run the progrom with 5 servers and 5 clients with lambda = 0.5 and mu = 
   0.02

   You should strictly follow the syntax above!

Author: Hongru Li
Student ID: 215245830
================================================================================
Description:
   The program emulate a set of servers and a set of clients who continuously
   generated task and comsume tasks in one task quene. The servers and clients do 
   synconization under the control of a clock thread using mutex lock. 'Suspend'
   and 'wakeup' is done by prototype algorithm like signal() and wait() introduced
   in class.

   This program did not use pthread_cond_wait and pthread_cond_signal because
   the clock and the set of servers and clients wait each other like the last 
   assignment and is complicated by using the above two functions. However, 
   the data is well protected by a mutex and no server or client can be emited 
   more than once in a signal tick.

   Also this method is busy waiting, it will not cause dead lock caused when 
   pthread_cond_wait is not ready but the pthread_cond_signal is excuted. To
   avoid deadlock in pthread_cond_wait also need busy waiting unless the some
   atomic operation is provided.

   In this assignment, the clock should emit next tick when everything is done.
   But if the last server or client tells the clock when it is done, a paradox 
   generated. If you are able to tell the clock, you are not suspend and ready
   for the next tick.

   but if a tick is one second or half a second or somthing, the clock and users
   can use pthread_cond_wait and pthread_cond_signal.

   Total waiting time is record by accumulate how many tasks remain at the end of
    a tick.

   Total excution time is record by accumulate how many server is BUSY in a tick.

   Total turnaround time is done by add Total wait time and Total excute time.

   Total quene length is done by add the length of quene at each tick together.

   Total interarriavl time is 1000 ticks.

   As we know how many tasks are generated and the program is run for 1000 ticks,
   We can calculate AWT, AXT, ATA, AQL and AIA.
================================================================================
